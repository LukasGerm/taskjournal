// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  channels      ChannelMember[]
  ownedChannels Channel[]
  roles         UserRole[]
  messages      Message[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRevoked Boolean  @default(false)

  @@index([userId])
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner    User            @relation(fields: [ownerId], references: [id])
  ownerId  String
  members  ChannelMember[]
  messages Message[]
}

model ChannelMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())

  // Relationships
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  @@unique([userId, channelId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
  createdAt   DateTime @default(now())

  // Relationships
  users UserRole[]
}

model UserRole {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}
